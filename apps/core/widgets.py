"""
Custom widgets for the Autowash application
"""
from django import forms
from django.forms.widgets import Select, TextInput
from django.utils.html import format_html
from django.urls import reverse_lazy
import phonenumbers


class PhoneNumberWidget(forms.MultiWidget):
    """
    A widget that splits phone number input into country code and number
    """
    
    # Country codes with visible country names for searchability
    COUNTRY_CHOICES = [
        ('KE', 'ğŸ‡°ğŸ‡ª +254 Kenya'),
        ('UG', 'ğŸ‡ºğŸ‡¬ +256 Uganda'),
        ('TZ', 'ğŸ‡¹ğŸ‡¿ +255 Tanzania'),
        ('RW', 'ğŸ‡·ğŸ‡¼ +250 Rwanda'),
        ('ET', 'ğŸ‡ªğŸ‡¹ +251 Ethiopia'),
        ('SO', 'ğŸ‡¸ğŸ‡´ +252 Somalia'),
        ('SS', 'ğŸ‡¸ğŸ‡¸ +211 South Sudan'),
        ('US', 'ğŸ‡ºğŸ‡¸ +1 United States'),
        ('GB', 'ğŸ‡¬ğŸ‡§ +44 United Kingdom'),
        ('CA', 'ğŸ‡¨ğŸ‡¦ +1 Canada'),
        ('AU', 'ğŸ‡¦ğŸ‡º +61 Australia'),
        ('IN', 'ğŸ‡®ğŸ‡³ +91 India'),
        ('CN', 'ğŸ‡¨ğŸ‡³ +86 China'),
        ('JP', 'ğŸ‡¯ğŸ‡µ +81 Japan'),
        ('DE', 'ğŸ‡©ğŸ‡ª +49 Germany'),
        ('FR', 'ğŸ‡«ğŸ‡· +33 France'),
        ('IT', 'ğŸ‡®ğŸ‡¹ +39 Italy'),
        ('ES', 'ğŸ‡ªğŸ‡¸ +34 Spain'),
        ('BR', 'ğŸ‡§ğŸ‡· +55 Brazil'),
        ('MX', 'ğŸ‡²ğŸ‡½ +52 Mexico'),
        ('AR', 'ğŸ‡¦ğŸ‡· +54 Argentina'),
        ('EG', 'ğŸ‡ªğŸ‡¬ +20 Egypt'),
        ('NG', 'ğŸ‡³ğŸ‡¬ +234 Nigeria'),
        ('ZA', 'ğŸ‡¿ğŸ‡¦ +27 South Africa'),
        ('GH', 'ğŸ‡¬ğŸ‡­ +233 Ghana'),
        ('MA', 'ğŸ‡²ğŸ‡¦ +212 Morocco'),
        ('AE', 'ğŸ‡¦ğŸ‡ª +971 UAE'),
        ('SA', 'ğŸ‡¸ğŸ‡¦ +966 Saudi Arabia'),
        ('PK', 'ğŸ‡µğŸ‡° +92 Pakistan'),
        ('BD', 'ğŸ‡§ğŸ‡© +880 Bangladesh'),
        ('LK', 'ğŸ‡±ğŸ‡° +94 Sri Lanka'),
        ('MY', 'ğŸ‡²ğŸ‡¾ +60 Malaysia'),
        ('SG', 'ğŸ‡¸ğŸ‡¬ +65 Singapore'),
        ('TH', 'ğŸ‡¹ğŸ‡­ +66 Thailand'),
        ('VN', 'ğŸ‡»ğŸ‡³ +84 Vietnam'),
        ('ID', 'ğŸ‡®ğŸ‡© +62 Indonesia'),
        ('PH', 'ğŸ‡µğŸ‡­ +63 Philippines'),
        ('KR', 'ğŸ‡°ğŸ‡· +82 South Korea'),
        ('TR', 'ğŸ‡¹ğŸ‡· +90 Turkey'),
        ('RU', 'ğŸ‡·ğŸ‡º +7 Russia'),
        ('UA', 'ğŸ‡ºğŸ‡¦ +380 Ukraine'),
        ('PL', 'ğŸ‡µğŸ‡± +48 Poland'),
        ('NL', 'ğŸ‡³ğŸ‡± +31 Netherlands'),
        ('BE', 'ğŸ‡§ğŸ‡ª +32 Belgium'),
        ('CH', 'ğŸ‡¨ğŸ‡­ +41 Switzerland'),
        ('AT', 'ğŸ‡¦ğŸ‡¹ +43 Austria'),
        ('SE', 'ğŸ‡¸ğŸ‡ª +46 Sweden'),
        ('NO', 'ğŸ‡³ğŸ‡´ +47 Norway'),
        ('DK', 'ğŸ‡©ğŸ‡° +45 Denmark'),
        ('FI', 'ğŸ‡«ğŸ‡® +358 Finland'),
        ('IE', 'ğŸ‡®ğŸ‡ª +353 Ireland'),
        ('PT', 'ğŸ‡µğŸ‡¹ +351 Portugal'),
        ('GR', 'ğŸ‡¬ğŸ‡· +30 Greece'),
        ('CZ', 'ğŸ‡¨ğŸ‡¿ +420 Czech Republic'),
        ('HU', 'ğŸ‡­ğŸ‡º +36 Hungary'),
        ('RO', 'ğŸ‡·ğŸ‡´ +40 Romania'),
        ('BG', 'ğŸ‡§ğŸ‡¬ +359 Bulgaria'),
        ('HR', 'ğŸ‡­ğŸ‡· +385 Croatia'),
        ('SI', 'ğŸ‡¸ğŸ‡® +386 Slovenia'),
        ('SK', 'ğŸ‡¸ğŸ‡° +421 Slovakia'),
        ('LT', 'ğŸ‡±ğŸ‡¹ +370 Lithuania'),
        ('LV', 'ğŸ‡±ğŸ‡» +371 Latvia'),
        ('EE', 'ğŸ‡ªğŸ‡ª +372 Estonia'),
    ]
    
    def __init__(self, attrs=None):
        widgets = [
            Select(choices=self.COUNTRY_CHOICES, attrs={
                'class': 'form-select country-select'
            }),
            TextInput(attrs={
                'class': 'form-control phone-number',
                'placeholder': '712345678'
            })
        ]
        super().__init__(widgets, attrs)
    
    def decompress(self, value):
        if value:
            # Try to parse the phone number
            try:
                parsed_number = phonenumbers.parse(str(value), None)
                country_code = phonenumbers.region_code_for_number(parsed_number)
                national_number = str(parsed_number.national_number)
                return [country_code, national_number]
            except:
                # If parsing fails, try to extract manually
                value_str = str(value)
                if value_str.startswith('+'):
                    # Find matching country code
                    for code, display in self.COUNTRY_CHOICES:
                        country_calling_code = phonenumbers.country_code_for_region(code)
                        if value_str.startswith(f'+{country_calling_code}'):
                            number = value_str[len(f'+{country_calling_code}'):].strip()
                            return [code, number]
                return ['KE', value_str]  # Default to Kenya
        return ['KE', '']  # Default to Kenya with empty number
    
    def value_from_datadict(self, data, files, name):
        country_code = data.get(name + '_0')
        phone_number = data.get(name + '_1')
        
        if country_code and phone_number:
            try:
                # Get the country calling code
                calling_code = phonenumbers.country_code_for_region(country_code)
                # Format as international number
                full_number = f'+{calling_code}{phone_number}'
                
                # Validate the number
                parsed_number = phonenumbers.parse(full_number, None)
                if phonenumbers.is_valid_number(parsed_number):
                    return phonenumbers.format_number(parsed_number, phonenumbers.PhoneNumberFormat.E164)
                else:
                    return full_number  # Return as-is if validation fails
            except:
                return f'+{phonenumbers.country_code_for_region(country_code or "KE")}{phone_number}'
        
        return None
    
    def format_output(self, rendered_widgets):
        return format_html(
            '<div class="phone-number-widget d-flex gap-2">{}{}</div>',
            rendered_widgets[0],
            rendered_widgets[1]
        )
    
    class Media:
        css = {
            'all': ('css/phone-widget.css',)
        }
        js = ('js/phone-widget.js',)


class SimplePhoneNumberWidget(TextInput):
    """
    A simpler phone number widget with country code prefix
    """
    def __init__(self, country_code='+254', attrs=None):
        if attrs is None:
            attrs = {}
        attrs.update({
            'class': 'form-control',
            'placeholder': f'{country_code}712345678',
            'pattern': r'\+[1-9]\d{1,14}',
            'title': 'Enter phone number with country code (e.g., +254712345678)'
        })
        self.country_code = country_code
        super().__init__(attrs)
    
    def format_value(self, value):
        if value and not str(value).startswith('+'):
            return f'{self.country_code}{value}'
        return value or ''
